version:
  2.1

  # create executors, underlying environment to run jobs
executors:
  app-executor:
    docker:
      - image: circleci/node:latest
    working_directory: ~/repo
    resource_class: small
  terraform-executor:
    docker:
      - image: hashicorp/terraform:latest

# create aliases; reusable variables to use in jobs
aliases:
  - &show-current-branch-name
    run:
      name: Show current branch
      command: echo ${CIRCLE_BRANCH}
  - &restore-cache
    restore_cache:
      keys:
        - app-{{checksum "package.json"}}
        - app-
  - &install-dependencies
    run:
      name: Install dependencies
      command: |
        mkdir -p artifacts
        npm install
  - &save-cache
    save_cache:
      paths:
        - node_modules
      key: app-{{checksum "package.json"}}
  - &install-aws-cli
    run:
      name: Installing AWS CLI
      working_directory: /
      command: |
        sudo apt-get -y -qq update
        sudo apt-get install -y awscli
        sudo apt-get install -y python-pip python-dev build-essential
  - &build-project
    run:
      name: Build Project
      command: |
        npm install
        npm run build
        cd build
        zip ../build.zip -r * .[^.]*
        echo "Build Successful!"

  # create job named "build"; create docker image
  # show current branch
  # check to see if package.json is in cache
  # install deps
  # add package.json and node modules to cache
jobs:
  build:
    executor: app-executor
    steps:
      - checkout
      - *show-current-branch-name
      - *restore-cache
      - *install-dependencies
      - *save-cache
      - run:
          name: Copy infrastructure Folder
          command: cp -r infrastructure artifacts/infrastructure
      - persist_to_workspace:
          root: ./
          paths:
            - artifacts
  # run linter job
  linting:
    executor: app-executor
    steps:
      - checkout
      - *show-current-branch-name
      - *restore-cache
      - run:
          name: run linting
          command: npm run lint
  # prettier job to check formatting
  prettier:
    executor: app-executor
    steps:
      - checkout
      - *show-current-branch-name
      - *restore-cache
      - run:
          name: run prettier check
          command: npm run prettier:check

  # # Terraform job to validate and format
  # terraform-validate:
  #   executor: terraform-executor
  #   steps:
  #     - checkout
  #     - *show-current-branch-name
  #     - run:
  #         name: Terraform Validate & formatting
  #         command: |
  #           cd infrastructure/
  #           terraform init --backend=false
  #           terraform validate
  #           terraform fmt -check

  # # Terraform job to plan and apply
  # terraform-plan-and-apply:
  #   executor: terraform-executor
  #   steps:
  #     - checkout
  #     - attach_workspace:
  #         at: ./
  #     - *show-current-branch-name
  #     - run:
  #         name: Terraform Plan
  #         command: |
  #           cd artifacts/infrastructure/
  #           terraform init
  #           terraform workspace select ${CIRCLE_BRANCH} || terraform workspace new ${CIRCLE_BRANCH}
  #           terraform plan
  #     - run:
  #         name: Terraform Apply
  #         command: |
  #           cd artifacts/infrastructure/
  #           terraform workspace select ${CIRCLE_BRANCH}
  #           terraform apply --auto-approve
  #           terraform output josemariodev_portfolio_bucket_name > ../josemariodev_portfolio_bucket_name.txt
  #           terraform output cloudfront_distribution_id > ../cloudfront_distribution_id.txt
  #     - persist_to_workspace:
  #         root: ./
  #         paths:
  #           - artifacts
  # job to install aws cli, run build, deploy to s3 bucket
  deploy-to-aws-s3:
    executor: app-executor
    steps:
      - checkout
      # - attach_workspace:
      #     at: ./
      - *show-current-branch-name
      - *install-aws-cli
      - *build-project
      - run:
          name: Deploy to AWS S3
          command: |
            if [ "${CIRCLE_BRANCH}" == "master" ]
            then
              aws --region ${AWS_REGION} s3 sync ~/repo/build s3://${AWS_BUCKET_PRODUCTION} --delete
            else
              aws --region ${AWS_REGION} s3 sync ~/repo/build s3://${AWS_DEV_BUCKET} --delete
            fi
  job to deploy to cloudfront
  deploy-to-aws-cloudfront:
    executor: app-executor
    steps:
      - checkout
      # - attach_workspace:
      #     at: ./
      - *show-current-branch-name
      - *install-aws-cli
      - *build-project
      - run:
          name: Deploy to AWS Cloudfront
          command: |
            aws configure set preview.cloudfront true
            if [ "${CIRCLE_BRANCH}" == "master" ]
            then
              aws cloudfront create-invalidation --distribution-id ${PRODUCTION_DISTRIBUTION_ID} --paths /\*
            else
              aws cloudfront create-invalidation --distribution-id ${DEV_DISTRIBUTION_ID} --paths /\*
            fi
  # terraform-destroy:
  #   executor: terraform-executor
  #   steps:
  #     - checkout
  #     - *show-current-branch-name
  #     - run:
  #         name: Terraform destroy
  #         command: |
  #           cd infrastructure/
  #           terraform init
  #           terraform workspace select ${CIRCLE_BRANCH} || terraform workspace new ${CIRCLE_BRANCH}
  #           terraform destroy --auto-approve

# order of how jobs will be executed and dependencies
workflows:
  build_and_deploy:
    jobs:
      - build
      - linting:
          requires:
            - build
          filters:
            branches:
              only:
                - development
                - master
      - prettier:
          requires:
            - build
          filters:
            branches:
              only:
                - development
                - master
      # - terraform-validate:
      #     requires:
      #       - linting
      #       - prettier
      #     filters:
      #       branches:
      #         only:
      #           - development
      #           - master
      # - terraform-plan-and-apply:
      #     requires:
      #       - terraform-validate
      #     filters:
      #       branches:
      #         only:
      #           - development
      #           - master
      - deploy-to-aws-s3:
          requires:
            - linting
            - prettier
          filters:
            branches:
              only:
                - development
                - master
      - deploy-to-aws-cloudfront:
          requires:
            - deploy-to-aws-s3
          filters:
            branches:
              only:
                - development
                - master
      # - hold:
      #     type: approval
      #     requires:
      #       - deploy-to-aws-cloudfront
      # - terraform-destroy:
      #     requires:
      #       - hold
      #     filters:
      #       branches:
      #         only:
      #           - development
      #           - master
